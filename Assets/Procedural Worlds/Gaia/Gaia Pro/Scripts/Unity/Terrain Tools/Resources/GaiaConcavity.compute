Texture2D<float> In_BaseMaskTex;
Texture2D<float> In_HeightTex;
Texture2D<float> In_HeightTransformTex;
//Texture2D<float> RemapTex;
RWTexture2D<float> OutputTex;
int HeightTransformTexResolution;
float2 HeightmapResolution;
float4 TextureResolution;

float2 gradient(uint2 id, uint2 offset) {

	uint upY = max(0, id.y - offset.y);
	uint downY = min((uint)HeightmapResolution.y, id.y + offset.y);
	uint rightX = max(0, id.x - offset.x);
	uint leftX = min((uint)HeightmapResolution.x, id.x + offset.x);

	//don't need to divide by 8.0f, since we are normalizing
	float dzdx = ((In_HeightTex[uint2(rightX, upY)] + 2 * In_HeightTex[uint2(rightX, id.y)] + In_HeightTex[uint2(rightX, downY)]) -
		(In_HeightTex[uint2(leftX, upY)] + 2 * In_HeightTex[uint2(leftX, id.y)] + In_HeightTex[uint2(leftX, downY)])) / 8.0f;
	float dzdy = ((In_HeightTex[uint2(leftX, downY)] + 2 * In_HeightTex[uint2(id.x, downY)] + In_HeightTex[uint2(rightX, downY)]) -
		(In_HeightTex[uint2(leftX, upY)] + 2 * In_HeightTex[uint2(id.x, upY)] + In_HeightTex[uint2(rightX, upY)])) / 8.0f;

	float mag = length(float2(dzdx, dzdy));
	return float2(dzdx, dzdy) / mag;
}

float Laplace(uint3 id) {
	uint2 offset = uint2(TextureResolution.zz);
	uint minDistanceToBorder = min(min((uint)HeightmapResolution.x - id.x, id.x),min((uint)HeightmapResolution.y - id.y, id.y));

	uint upY = max(0, id.y - offset.y);
	uint downY = min((uint)HeightmapResolution.y, id.y + offset.y);
	uint rightX = max(0, id.x - offset.x);
	uint leftX = min((uint)HeightmapResolution.x, id.x + offset.x);

	/*
	float dgdx = gradient(uint2(rightX, id.y), offset).x - gradient(uint2(leftX, id.y), offset).x;
	float dgdy = gradient(uint2(id.x, downY), offset).y - gradient(uint2(id.x, upY), offset).y;
	*/
	float dgdx = ((gradient(uint2(rightX, upY), offset).x + 2 * gradient(uint2(rightX, id.y), offset).x + gradient(uint2(rightX, downY), offset).x) -
		(gradient(uint2(leftX, upY), offset).x + 2 * gradient(uint2(leftX, id.y), offset).x + gradient(uint2(leftX, downY), offset).x)) / 8.0f;
	float dgdy = ((gradient(uint2(leftX, downY), offset).y + 2 * gradient(uint2(id.x, downY), offset).y + gradient(uint2(rightX, downY), offset).y) -
		(gradient(uint2(leftX, upY), offset).y + 2 * gradient(uint2(id.x, upY), offset).y + gradient(uint2(rightX, upY), offset).y)) / 8.0f;

	float laplace = saturate(TextureResolution.w * (dgdx + dgdy) / 2.0f);

	return smoothstep(0,TextureResolution.z * 2.0f,minDistanceToBorder - TextureResolution.z*2.0f) * laplace;

}

#pragma kernel ConcavityMultiply
[numthreads(1, 1, 1)]
void ConcavityMultiply(uint3 id : SV_DispatchThreadID)
{
	float resolutionFactor = HeightmapResolution.x / TextureResolution.x;
	float laplace = Laplace(id * resolutionFactor) * 2.0f;
	float result = In_HeightTransformTex[float2(saturate(laplace)*HeightTransformTexResolution,0.0f)];

	OutputTex[id.xy] = result * In_BaseMaskTex[id.xy];//lerp(In_BaseMaskTex[id.xy], result * In_BaseMaskTex[id.xy], EffectStrength);
}

#pragma kernel ConcavityGreaterThan
[numthreads(1, 1, 1)]
void ConcavityGreaterThan(uint3 id : SV_DispatchThreadID)
{
	float resolutionFactor = HeightmapResolution.x / TextureResolution.x;
	float laplace = Laplace(id * resolutionFactor) * 2.0f;

	laplace = In_HeightTransformTex[float2(saturate(laplace)*HeightTransformTexResolution,0.0f)];

	float result = In_BaseMaskTex[id.xy];
	if (laplace > In_BaseMaskTex[id.xy])
	{
		result = laplace;
	}

	OutputTex[id.xy] = result; //lerp(In_BaseMaskTex[id.xy], result, EffectStrength);
}

#pragma kernel ConcavitySmallerThan
[numthreads(1, 1, 1)]
void ConcavitySmallerThan(uint3 id : SV_DispatchThreadID)
{
	float resolutionFactor = HeightmapResolution.x / TextureResolution.x;
	float laplace = Laplace(id * resolutionFactor) * 2.0f;

	laplace = In_HeightTransformTex[float2(saturate(laplace)*HeightTransformTexResolution,0.0f)];

	float result = In_BaseMaskTex[id.xy];
	if (laplace < In_BaseMaskTex[id.xy])
	{
		result = laplace;
	}

	OutputTex[id.xy] = result ;//lerp(In_BaseMaskTex[id.xy], result, EffectStrength);
}

#pragma kernel ConcavityAdd
[numthreads(1, 1, 1)]
void ConcavityAdd(uint3 id : SV_DispatchThreadID)
{
	float resolutionFactor = HeightmapResolution.x / TextureResolution.x;
	float laplace = Laplace(id * resolutionFactor) * 2.0f;
	laplace = In_HeightTransformTex[float2(saturate(laplace)*HeightTransformTexResolution,0.0f)];
	float result = In_BaseMaskTex[id.xy] + laplace;
	
	OutputTex[id.xy] = result;// lerp(In_BaseMaskTex[id.xy], result, EffectStrength);
}

#pragma kernel ConcavitySubtract
[numthreads(1, 1, 1)]
void ConcavitySubtract(uint3 id : SV_DispatchThreadID)
{
	float resolutionFactor = HeightmapResolution.x / TextureResolution.x;
	float laplace = Laplace(id * resolutionFactor) * 2.0f;
	laplace = In_HeightTransformTex[float2(saturate(laplace)*HeightTransformTexResolution,0.0f)];
	float result = In_BaseMaskTex[id.xy] - laplace;

	OutputTex[id.xy] = result;//lerp(In_BaseMaskTex[id.xy], result, EffectStrength);
}
